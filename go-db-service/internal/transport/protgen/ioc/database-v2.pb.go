// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.29.3
// source: api/proto/database-v2.proto

package ioc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IoCDto представляет структуру данных для IOCs (Indicators of Compromise)
type IoCDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                                       // Идентификатор (может быть пустым)
	Source         string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                                                                                                                               // Источник
	FirstSeen      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`                                                                                                        // Дата первого обнаружения (может быть пустой)
	LastSeen       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`                                                                                                           // Дата последнего обнаружения (может быть пустой)
	Type           string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                                                                                                                   // Тип
	Value          string                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`                                                                                                                                 // Значение
	Tags           []string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`                                                                                                                                   // Теги
	AdditionalData map[string]string      `protobuf:"bytes,8,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Дополнительные данные
}

func (x *IoCDto) Reset() {
	*x = IoCDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IoCDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IoCDto) ProtoMessage() {}

func (x *IoCDto) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IoCDto.ProtoReflect.Descriptor instead.
func (*IoCDto) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{0}
}

func (x *IoCDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IoCDto) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *IoCDto) GetFirstSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *IoCDto) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *IoCDto) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IoCDto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *IoCDto) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *IoCDto) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

// Запись в бд: Принимает массив и возвращает пока что ничего
// мб стоит отдельно написать респонс с кол-вом записанных
type StoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IoCs []*IoCDto `protobuf:"bytes,1,rep,name=IoCs,proto3" json:"IoCs,omitempty"`
}

func (x *StoreRequest) Reset() {
	*x = StoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreRequest) ProtoMessage() {}

func (x *StoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreRequest.ProtoReflect.Descriptor instead.
func (*StoreRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{1}
}

func (x *StoreRequest) GetIoCs() []*IoCDto {
	if x != nil {
		return x.IoCs
	}
	return nil
}

type LoadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *LoadRequest) Reset() {
	*x = LoadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadRequest) ProtoMessage() {}

func (x *LoadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadRequest.ProtoReflect.Descriptor instead.
func (*LoadRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{2}
}

func (x *LoadRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LoadRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *LoadRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type LoadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IoCs []*IoCDto `protobuf:"bytes,1,rep,name=IoCs,proto3" json:"IoCs,omitempty"`
}

func (x *LoadResponse) Reset() {
	*x = LoadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadResponse) ProtoMessage() {}

func (x *LoadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadResponse.ProtoReflect.Descriptor instead.
func (*LoadResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{3}
}

func (x *LoadResponse) GetIoCs() []*IoCDto {
	if x != nil {
		return x.IoCs
	}
	return nil
}

// Стримовый запрос для записи IoC
type StreamStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ioc *IoCDto `protobuf:"bytes,1,opt,name=ioc,proto3" json:"ioc,omitempty"` // Один IoC для записи
}

func (x *StreamStoreRequest) Reset() {
	*x = StreamStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStoreRequest) ProtoMessage() {}

func (x *StreamStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStoreRequest.ProtoReflect.Descriptor instead.
func (*StreamStoreRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{4}
}

func (x *StreamStoreRequest) GetIoc() *IoCDto {
	if x != nil {
		return x.Ioc
	}
	return nil
}

// Стримовый ответ для загрузки IoC
type StreamLoadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ioc *IoCDto `protobuf:"bytes,1,opt,name=ioc,proto3" json:"ioc,omitempty"` // Один IoC в ответе
}

func (x *StreamLoadResponse) Reset() {
	*x = StreamLoadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamLoadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLoadResponse) ProtoMessage() {}

func (x *StreamLoadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLoadResponse.ProtoReflect.Descriptor instead.
func (*StreamLoadResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{5}
}

func (x *StreamLoadResponse) GetIoc() *IoCDto {
	if x != nil {
		return x.Ioc
	}
	return nil
}

// Запрос для получения общего количества IoC
type CountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountRequest) Reset() {
	*x = CountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRequest) ProtoMessage() {}

func (x *CountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRequest.ProtoReflect.Descriptor instead.
func (*CountRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{6}
}

// Ответ с общим количеством IoC
type CountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // Общее количество IoC
}

func (x *CountResponse) Reset() {
	*x = CountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResponse) ProtoMessage() {}

func (x *CountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResponse.ProtoReflect.Descriptor instead.
func (*CountResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{7}
}

func (x *CountResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Ответ с количеством IoC по типам
type CountByTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeCounts map[string]int64 `protobuf:"bytes,1,rep,name=type_counts,json=typeCounts,proto3" json:"type_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Карта: тип -> количество
}

func (x *CountByTypeResponse) Reset() {
	*x = CountByTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountByTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountByTypeResponse) ProtoMessage() {}

func (x *CountByTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountByTypeResponse.ProtoReflect.Descriptor instead.
func (*CountByTypeResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{8}
}

func (x *CountByTypeResponse) GetTypeCounts() map[string]int64 {
	if x != nil {
		return x.TypeCounts
	}
	return nil
}

// Запрос для получения количества IoC конкретного типа
type CountSpecificTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // Тип IoC
}

func (x *CountSpecificTypeRequest) Reset() {
	*x = CountSpecificTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountSpecificTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountSpecificTypeRequest) ProtoMessage() {}

func (x *CountSpecificTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountSpecificTypeRequest.ProtoReflect.Descriptor instead.
func (*CountSpecificTypeRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{9}
}

func (x *CountSpecificTypeRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Запрос для получения количества IoC по источникам
type CountBySourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountBySourceRequest) Reset() {
	*x = CountBySourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBySourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBySourceRequest) ProtoMessage() {}

func (x *CountBySourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBySourceRequest.ProtoReflect.Descriptor instead.
func (*CountBySourceRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{10}
}

// Ответ с количеством IoC по источникам
type CountBySourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCounts map[string]int64 `protobuf:"bytes,1,rep,name=source_counts,json=sourceCounts,proto3" json:"source_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Карта: источник -> количество
}

func (x *CountBySourceResponse) Reset() {
	*x = CountBySourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBySourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBySourceResponse) ProtoMessage() {}

func (x *CountBySourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBySourceResponse.ProtoReflect.Descriptor instead.
func (*CountBySourceResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{11}
}

func (x *CountBySourceResponse) GetSourceCounts() map[string]int64 {
	if x != nil {
		return x.SourceCounts
	}
	return nil
}

// Запрос для получения количества IoC конкретного источника
type CountSpecificSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"` // Источник IoC
}

func (x *CountSpecificSourceRequest) Reset() {
	*x = CountSpecificSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountSpecificSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountSpecificSourceRequest) ProtoMessage() {}

func (x *CountSpecificSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountSpecificSourceRequest.ProtoReflect.Descriptor instead.
func (*CountSpecificSourceRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{12}
}

func (x *CountSpecificSourceRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// Ответ с количеством IoC по типам и источникам
type CountTypesBySourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceTypeCounts map[string]*CountByTypeResponse `protobuf:"bytes,1,rep,name=source_type_counts,json=sourceTypeCounts,proto3" json:"source_type_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Карта: источник -> (тип -> количество)
}

func (x *CountTypesBySourceResponse) Reset() {
	*x = CountTypesBySourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTypesBySourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTypesBySourceResponse) ProtoMessage() {}

func (x *CountTypesBySourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTypesBySourceResponse.ProtoReflect.Descriptor instead.
func (*CountTypesBySourceResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{13}
}

func (x *CountTypesBySourceResponse) GetSourceTypeCounts() map[string]*CountByTypeResponse {
	if x != nil {
		return x.SourceTypeCounts
	}
	return nil
}

// Запрос для получения количества IoC по источнику и типу
type CountBySourceAndTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"` // Источник IoC
}

func (x *CountBySourceAndTypeRequest) Reset() {
	*x = CountBySourceAndTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBySourceAndTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBySourceAndTypeRequest) ProtoMessage() {}

func (x *CountBySourceAndTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBySourceAndTypeRequest.ProtoReflect.Descriptor instead.
func (*CountBySourceAndTypeRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{14}
}

func (x *CountBySourceAndTypeRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// Запрос для получения количества IoC по типу и источнику
type CountByTypeAndSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // Тип IoC
}

func (x *CountByTypeAndSourceRequest) Reset() {
	*x = CountByTypeAndSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_database_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountByTypeAndSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountByTypeAndSourceRequest) ProtoMessage() {}

func (x *CountByTypeAndSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_database_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountByTypeAndSourceRequest.ProtoReflect.Descriptor instead.
func (*CountByTypeAndSourceRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_database_v2_proto_rawDescGZIP(), []int{15}
}

func (x *CountByTypeAndSourceRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_api_proto_database_v2_proto protoreflect.FileDescriptor

var file_api_proto_database_v2_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2d, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x69,
	0x6f, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xef, 0x02, 0x0a, 0x06, 0x49, 0x6f, 0x43, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x37,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x49, 0x6f, 0x43, 0x44, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x41, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x2f, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x49, 0x6f, 0x43, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x49, 0x6f, 0x43, 0x44, 0x74, 0x6f, 0x52, 0x04, 0x49,
	0x6f, 0x43, 0x73, 0x22, 0x53, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x2f, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x49, 0x6f, 0x43, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x49, 0x6f, 0x43,
	0x44, 0x74, 0x6f, 0x52, 0x04, 0x49, 0x6f, 0x43, 0x73, 0x22, 0x33, 0x0a, 0x12, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x03, 0x69, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69,
	0x6f, 0x63, 0x2e, 0x49, 0x6f, 0x43, 0x44, 0x74, 0x6f, 0x52, 0x03, 0x69, 0x6f, 0x63, 0x22, 0x33,
	0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x69, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x49, 0x6f, 0x43, 0x44, 0x74, 0x6f, 0x52, 0x03,
	0x69, 0x6f, 0x63, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x18,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x16, 0x0a, 0x14,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x5d, 0x0a, 0x15,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x1b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x31, 0x0a, 0x1b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0xb3, 0x06, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x11, 0x2e, 0x69, 0x6f,
	0x63, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x10,
	0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x17, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c,
	0x6f, 0x61, 0x64, 0x12, 0x10, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x33, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x12, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x69,
	0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x2e, 0x69, 0x6f,
	0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x69, 0x6f, 0x63,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x19, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6f, 0x63,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x2e,
	0x69, 0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1f, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x2e, 0x69, 0x6f, 0x63, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x69, 0x6f,
	0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x2e,
	0x69, 0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x69, 0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x26, 0x5a, 0x24, 0x2e,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x6f, 0x63, 0x3b,
	0x69, 0x6f, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_database_v2_proto_rawDescOnce sync.Once
	file_api_proto_database_v2_proto_rawDescData = file_api_proto_database_v2_proto_rawDesc
)

func file_api_proto_database_v2_proto_rawDescGZIP() []byte {
	file_api_proto_database_v2_proto_rawDescOnce.Do(func() {
		file_api_proto_database_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_database_v2_proto_rawDescData)
	})
	return file_api_proto_database_v2_proto_rawDescData
}

var file_api_proto_database_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_api_proto_database_v2_proto_goTypes = []interface{}{
	(*IoCDto)(nil),                      // 0: ioc.IoCDto
	(*StoreRequest)(nil),                // 1: ioc.StoreRequest
	(*LoadRequest)(nil),                 // 2: ioc.LoadRequest
	(*LoadResponse)(nil),                // 3: ioc.LoadResponse
	(*StreamStoreRequest)(nil),          // 4: ioc.StreamStoreRequest
	(*StreamLoadResponse)(nil),          // 5: ioc.StreamLoadResponse
	(*CountRequest)(nil),                // 6: ioc.CountRequest
	(*CountResponse)(nil),               // 7: ioc.CountResponse
	(*CountByTypeResponse)(nil),         // 8: ioc.CountByTypeResponse
	(*CountSpecificTypeRequest)(nil),    // 9: ioc.CountSpecificTypeRequest
	(*CountBySourceRequest)(nil),        // 10: ioc.CountBySourceRequest
	(*CountBySourceResponse)(nil),       // 11: ioc.CountBySourceResponse
	(*CountSpecificSourceRequest)(nil),  // 12: ioc.CountSpecificSourceRequest
	(*CountTypesBySourceResponse)(nil),  // 13: ioc.CountTypesBySourceResponse
	(*CountBySourceAndTypeRequest)(nil), // 14: ioc.CountBySourceAndTypeRequest
	(*CountByTypeAndSourceRequest)(nil), // 15: ioc.CountByTypeAndSourceRequest
	nil,                                 // 16: ioc.IoCDto.AdditionalDataEntry
	nil,                                 // 17: ioc.CountByTypeResponse.TypeCountsEntry
	nil,                                 // 18: ioc.CountBySourceResponse.SourceCountsEntry
	nil,                                 // 19: ioc.CountTypesBySourceResponse.SourceTypeCountsEntry
	(*timestamppb.Timestamp)(nil),       // 20: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),               // 21: google.protobuf.Empty
}
var file_api_proto_database_v2_proto_depIdxs = []int32{
	20, // 0: ioc.IoCDto.first_seen:type_name -> google.protobuf.Timestamp
	20, // 1: ioc.IoCDto.last_seen:type_name -> google.protobuf.Timestamp
	16, // 2: ioc.IoCDto.additional_data:type_name -> ioc.IoCDto.AdditionalDataEntry
	0,  // 3: ioc.StoreRequest.IoCs:type_name -> ioc.IoCDto
	0,  // 4: ioc.LoadResponse.IoCs:type_name -> ioc.IoCDto
	0,  // 5: ioc.StreamStoreRequest.ioc:type_name -> ioc.IoCDto
	0,  // 6: ioc.StreamLoadResponse.ioc:type_name -> ioc.IoCDto
	17, // 7: ioc.CountByTypeResponse.type_counts:type_name -> ioc.CountByTypeResponse.TypeCountsEntry
	18, // 8: ioc.CountBySourceResponse.source_counts:type_name -> ioc.CountBySourceResponse.SourceCountsEntry
	19, // 9: ioc.CountTypesBySourceResponse.source_type_counts:type_name -> ioc.CountTypesBySourceResponse.SourceTypeCountsEntry
	8,  // 10: ioc.CountTypesBySourceResponse.SourceTypeCountsEntry.value:type_name -> ioc.CountByTypeResponse
	1,  // 11: ioc.Database.Store:input_type -> ioc.StoreRequest
	2,  // 12: ioc.Database.Load:input_type -> ioc.LoadRequest
	4,  // 13: ioc.Database.StreamStore:input_type -> ioc.StreamStoreRequest
	2,  // 14: ioc.Database.StreamLoad:input_type -> ioc.LoadRequest
	21, // 15: ioc.Database.Count:input_type -> google.protobuf.Empty
	21, // 16: ioc.Database.CountByType:input_type -> google.protobuf.Empty
	9,  // 17: ioc.Database.CountSpecificType:input_type -> ioc.CountSpecificTypeRequest
	10, // 18: ioc.Database.CountBySource:input_type -> ioc.CountBySourceRequest
	12, // 19: ioc.Database.CountSpecificSource:input_type -> ioc.CountSpecificSourceRequest
	21, // 20: ioc.Database.CountTypesBySource:input_type -> google.protobuf.Empty
	14, // 21: ioc.Database.CountBySourceAndType:input_type -> ioc.CountBySourceAndTypeRequest
	15, // 22: ioc.Database.CountByTypeAndSource:input_type -> ioc.CountByTypeAndSourceRequest
	21, // 23: ioc.Database.Store:output_type -> google.protobuf.Empty
	3,  // 24: ioc.Database.Load:output_type -> ioc.LoadResponse
	21, // 25: ioc.Database.StreamStore:output_type -> google.protobuf.Empty
	5,  // 26: ioc.Database.StreamLoad:output_type -> ioc.StreamLoadResponse
	7,  // 27: ioc.Database.Count:output_type -> ioc.CountResponse
	8,  // 28: ioc.Database.CountByType:output_type -> ioc.CountByTypeResponse
	7,  // 29: ioc.Database.CountSpecificType:output_type -> ioc.CountResponse
	11, // 30: ioc.Database.CountBySource:output_type -> ioc.CountBySourceResponse
	7,  // 31: ioc.Database.CountSpecificSource:output_type -> ioc.CountResponse
	13, // 32: ioc.Database.CountTypesBySource:output_type -> ioc.CountTypesBySourceResponse
	8,  // 33: ioc.Database.CountBySourceAndType:output_type -> ioc.CountByTypeResponse
	11, // 34: ioc.Database.CountByTypeAndSource:output_type -> ioc.CountBySourceResponse
	23, // [23:35] is the sub-list for method output_type
	11, // [11:23] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_proto_database_v2_proto_init() }
func file_api_proto_database_v2_proto_init() {
	if File_api_proto_database_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_database_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IoCDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamLoadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountByTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountSpecificTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBySourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBySourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountSpecificSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTypesBySourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBySourceAndTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_database_v2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountByTypeAndSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_database_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_database_v2_proto_goTypes,
		DependencyIndexes: file_api_proto_database_v2_proto_depIdxs,
		MessageInfos:      file_api_proto_database_v2_proto_msgTypes,
	}.Build()
	File_api_proto_database_v2_proto = out.File
	file_api_proto_database_v2_proto_rawDesc = nil
	file_api_proto_database_v2_proto_goTypes = nil
	file_api_proto_database_v2_proto_depIdxs = nil
}
